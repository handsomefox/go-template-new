// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users ("name", "email")
VALUES ($1, $2)
RETURNING id, name, email, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Name  string `db:"name" json:"name"`
	Email string `db:"email" json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*Users, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT "id",
    "name",
    "email",
    "created_at",
    "updated_at",
    "deleted_at"
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (*Users, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
SELECT "id",
    "name",
    "email",
    "created_at",
    "updated_at",
    "deleted_at"
FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]*Users, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateName = `-- name: UpdateName :one
UPDATE users
set name = $1
WHERE id = $2
RETURNING id, name, email, created_at, updated_at, deleted_at
`

type UpdateNameParams struct {
	Name string    `db:"name" json:"name"`
	ID   uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateName(ctx context.Context, arg *UpdateNameParams) (*Users, error) {
	row := q.db.QueryRowContext(ctx, updateName, arg.Name, arg.ID)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
