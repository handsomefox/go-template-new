run:
  tests: false

  # Allow multiple parallel golangci-lint instances running.
  # If false, golangci-lint acquires file lock on start.
  # Default: false
  allow-parallel-runners: true

  # Allow multiple golangci-lint instances running, but serialize them around a lock.
  # If false, golangci-lint exits with an error if it fails to acquire file lock on start.
  # Default: false
  allow-serial-runners: true

  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.17
  go: "1.23"

# output configuration options
output:
  # Show statistics per linter.
  # Default: false
  show-stats: true

  # Format: colored-line-number|line-number|json|colored-tab|tab|checkstyle|code-climate|junit-xml|github-actions|teamcity
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.xml,json:stdout,colored-line-number"
  #
  # Default: colored-line-number
  formats:
    - format: colored-tab
      path: stderr

  # Sort results by: filepath, line and column.
  # Default: false
  sort-results: true
  sort-order:
    - linter

linters-settings:
  tagliatelle:
    case:
      rules:
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `upperSnake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`, `header`
        json: snake
        yaml: camel
        toml: snake

  exhaustive:
    # Presence of "default" case in switch statements satisfies exhaustiveness,
    # even if all enum members are not listed.
    # Default: false
    default-signifies-exhaustive: true
  errcheck:
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    # Such cases aren't reported by default.
    # Default: false
    check-blank: true
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: true
  gocritic:
    # Enable multiple checks by tags in addition to default checks.
    # Run `GL_DEBUG=gocritic golangci-lint run --enable=gocritic` to see all tags and checks.
    # See https://github.com/go-critic/go-critic#usage -> section "Tags".
    # Default: []
    enabled-tags: [diagnostic, opinionated, performance, style]
    disabled-checks:
      - unnamedResult
      - commentedOutCode
      - commentedOutImport
linters:
  enable: [
      "asasalint",
      "asciicheck",
      "bidichk",
      "bodyclose",
      "canonicalheader",
      "contextcheck",
      "copyloopvar",
      "dogsled",
      "durationcheck",
      "errname",
      "errorlint",
      "exhaustive",
      "gocheckcompilerdirectives",
      "goconst",
      "gocritic",
      "gosec",
      "gosmopolitan",
      "govet",
      "inamedparam",
      "intrange",
      "loggercheck",
      "makezero",
      "mirror",
      "musttag",
      "nilerr",
      "nilnil",
      "noctx",
      "nolintlint",
      "perfsprint",
      "prealloc",
      "predeclared",
      "protogetter",
      "reassign",
      "revive",
      "rowserrcheck",
      "sloglint",
      "spancheck",
      "sqlclosecheck",
      "tagalign",
      "tenv",
      "testableexamples",
      "testifylint",
      "unconvert",
      "unparam",
      "usestdlibvars",
      "wastedassign",
      "whitespace",
      "zerologlint",
      # Style linters, comment out if needed
      # "dupl",
      # "nestif",
      # "stylecheck",
      # "tagliatelle",
      # Annoying, sometimes you need to call errors.New() and don't need the sentinel error.
      # "goerr113",
      # DEPRECATED
      # "execinquery",
    ]
issues:
  max-issues-per-linter: 0
  max-same-issues: 0
  exclude-dirs:
    - "./database/sqlc"
    - "./database/query"
    - "./database/migrations"
